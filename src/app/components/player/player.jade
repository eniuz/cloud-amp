// TODO: duration of song, fontawesome (play and stop icons, not text, but still color them)

.row.player(*ngIf="toPlayer.title", [ngStyle]="{'background-color': backgroundColor}")
  .col-xs-12.art-overlay([ngStyle]="{'background': overlayGradient + ', url(' + toPlayer.artwork_url + ') no-repeat center'}")
    .row
      .col-sm-3.artwork.no-pad
        img.img-responsive(src="{{toPlayer.artwork_url}}")
      .col-sm-9
        .row.main-controls
          .col-xs-12.centered
            button.btn.btn-success.pull-left(*ngIf="!isPlaying && !isDownloading", [ngStyle]="{'background-color': detailColor, 'color': primaryColor, 'box-shadow': '-1px 1px 0px 1px ' + primaryColor}", (click)="play()")
              i.fa.fa-2x.fa-play
            button.btn.btn-success.pull-left(*ngIf="isPlaying && !isDownloading", [ngStyle]="{'background-color': detailColor, 'color': primaryColor, 'box-shadow': '-1px 1px 0px 1px ' + primaryColor}", (click)="pause()")
              i.fa.fa-2x.fa-pause
            button.btn.btn-danger.pull-right(*ngIf="!isDownloading", [ngStyle]="{'background-color': detailColor, 'color': primaryColor, 'box-shadow': '-1px 1px 0px 1px ' + primaryColor}", (click)="stop()")
              i.fa.fa-2x.fa-stop
            h2.title([ngStyle]="{'color': primaryColor, 'text-shadow': '-2px 1px 0 ' + detailColor}") {{toPlayer.title}}
            h4.artist.italic([ngStyle]="{'color': secondaryColor}") {{toPlayer.artist}}
          .col-xs-12.centered
            span.playback-rate-value([ngStyle]="{'color': detailColor}") {{slider.value}}
          .col-xs-12
            input.playback-rate-control([ngStyle]="{'background': detailColor}", (input)="pitchChange(slider.value)", type="range", min="0.25", max="1.75", step="0.01", value="1" #slider)
          .col-xs-12.centered
            p([ngStyle]="{'color': primaryColor}") {{toPlayer.description}}
